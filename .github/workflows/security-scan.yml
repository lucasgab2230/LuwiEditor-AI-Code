name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 02:00 UTC (5-minute precision)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - dependencies-only

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Job de varredura de vulnerabilidades
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        if: ${{ github.event.inputs.scan_type != 'dependencies-only' }}
        working-directory: ./frontend
        run: npm audit --audit-level=moderate || echo "npm audit completed with warnings"

      - name: Run pip audit
        if: ${{ github.event.inputs.scan_type != 'dependencies-only' }}
        working-directory: ./backend
        run: |
          pip install pip-audit
          pip-audit --requirement requirements.txt --format=json --output=pip-audit-report.json || true

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-reports
          path: |
            trivy-results.sarif
            backend/pip-audit-report.json
          retention-days: 30
          if-no-files-found: warn

  # Job de detec√ß√£o de secrets
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          output: trufflehog-results.json

      - name: Upload secrets scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-scan-results
          path: trufflehog-results.json
          retention-days: 30
          if-no-files-found: warn

  # Job de an√°lise est√°tica de seguran√ßa
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type != 'quick' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline --no-audit

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript, python

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/jwt
            p/cwe-top-25

      - name: Run Bandit security linter
        working-directory: ./backend
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            bandit-report.json
          retention-days: 30
          if-no-files-found: warn

  # Job de an√°lise de cont√™iner
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type != 'quick' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: video-ai-editor:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy on container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'video-ai-editor:latest'
          format: 'sarif'
          output: 'container-trivy-results.sarif'
          exit-code: '0'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'container-trivy-results.sarif'

  # Job de relat√≥rio e notifica√ß√£o
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, secrets-scan, sast-scan, container-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate security summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let summary = '# üîí Security Scan Report\n\n';
            summary += `**Scan Type**: ${context.payload.inputs.scan_type || 'scheduled'}\n`;
            summary += `**Branch**: ${context.ref.replace('refs/heads/', '')}\n`;
            summary += `**Commit**: ${context.sha.substring(0, 7)}\n\n`;
            
            // Add results from each job
            const jobs = ['vulnerability-scan', 'secrets-scan', 'sast-scan', 'container-scan'];
            
            jobs.forEach(job => {
              const status = context.payload.workflow_run?.jobs?.find(j => j.name === job)?.conclusion || 'unknown';
              const icon = status === 'success' ? '‚úÖ' : status === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
              summary += `${icon} **${job}**: ${status}\n`;
            });
            
            summary += '\n## üìä Detailed Reports\n';
            summary += 'All detailed reports are available in the [Actions tab](https://github.com/${{ github.repository }}/actions).\n';
            
            fs.writeFileSync('security-summary.md', summary);
            
            // Output to GitHub summary
            console.log(summary);

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 7

      - name: Notify on security issues
        if: |
          needs.vulnerability-scan.result == 'failure' || 
          needs.secrets-scan.result == 'failure' || 
          needs.sast-scan.result == 'failure' || 
          needs.container-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            // Create an issue for security findings
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîí Security Issues Detected - ${context.sha.substring(0, 7)}`,
              body: `Security scan detected issues in commit ${context.sha}.\n\nPlease review the [security scan results](https://github.com/${{ github.repository }}/actions/runs/${context.runId}) and address the identified vulnerabilities.`,
              labels: ['security', 'high-priority']
            });
