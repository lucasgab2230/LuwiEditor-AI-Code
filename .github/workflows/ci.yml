name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Job de verificação de código
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline --no-audit

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: ESLint check
        working-directory: ./frontend
        run: npm run lint:check

      - name: Prettier check
        working-directory: ./frontend
        run: npm run format:check

      - name: TypeScript check
        working-directory: ./frontend
        run: npm run type-check

      - name: Python lint (flake8)
        working-directory: ./backend
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Python format (black)
        working-directory: ./backend
        run: |
          pip install black
          black --check --diff .

      - name: Security audit (npm)
        working-directory: ./frontend
        run: npm audit --audit-level=moderate

      - name: Security scan (Python)
        working-directory: ./backend
        run: |
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json
          retention-days: 30

  # Job de testes do frontend
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:unit -- --coverage --watchAll=false

      - name: Run integration tests
        working-directory: ./frontend
        run: npm run test:integration -- --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Job de testes do backend
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          python manage.py migrate

      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          coverage run --source='.' manage.py test
          coverage xml
          coverage report

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Job de build do frontend
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        working-directory: ./frontend
        run: npm run build
        env:
          GENERATE_SOURCEMAP: false

      - name: Check build size
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          pattern: "./frontend/build/**/*.{js,css,html}"
          exclude: "{./frontend/build/**/*.map,./frontend/build/manifest.json}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  # Job de análise estática
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript, python

  # Job de testes E2E
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline --no-audit

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

  # Job de verificação de dependências
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Check for outdated dependencies (npm)
        working-directory: ./frontend
        run: npm outdated || true

      - name: Check for outdated dependencies (pip)
        working-directory: ./backend
        run: |
          pip install pip-tools
          pip-compile --output-file=/dev/null requirements.in

      - name: Install Snyk
        run: npm install -g snyk

      - name: Run Snyk security scan (Frontend)
        if: env.SNYK_TOKEN != ''
        working-directory: ./frontend
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth $SNYK_TOKEN
          snyk test --severity-threshold=high || true
          snyk monitor --project-name=frontend || true

      - name: Run Snyk security scan (Backend)
        if: env.SNYK_TOKEN != ''
        working-directory: ./backend
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth $SNYK_TOKEN
          snyk test --severity-threshold=high || true
          snyk monitor --project-name=backend || true

  # Job de notificação
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests, backend-tests, frontend-build, static-analysis, e2e-tests, dependency-check]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.code-quality.result == 'success' && needs.frontend-tests.result == 'success' && needs.backend-tests.result == 'success' && needs.frontend-build.result == 'success' && needs.static-analysis.result == 'success' && needs.e2e-tests.result == 'success' && needs.dependency-check.result == 'success' }}
        run: |
          echo "✅ All CI checks passed successfully!"
          # Adicione aqui sua notificação (Slack, Discord, etc.)

      - name: Notify failure
        if: ${{ needs.code-quality.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.backend-tests.result == 'failure' || needs.frontend-build.result == 'failure' || needs.static-analysis.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.dependency-check.result == 'failure' }}
        run: |
          echo "❌ One or more CI checks failed!"
          # Adicione aqui sua notificação (Slack, Discord, etc.)
