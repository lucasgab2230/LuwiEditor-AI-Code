name: Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [closed]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de testes antes do deploy
  pre-deploy-tests:
    name: Pre-deploy Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.force_deploy != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run comprehensive tests
        run: |
          echo "Running pre-deploy validation..."
          # Add your test commands here
          echo "All tests passed!"

  # Job de build da imagem Docker
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: pre-deploy-tests
    if: ${{ needs.pre-deploy-tests.result == 'success' || github.event.inputs.force_deploy == 'true' }}
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job de deploy para staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.video-ai-editor.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          
          # Add your deployment commands here
          # For example, using kubectl, helm, or docker-compose
          
          echo "Deployment to staging completed successfully!"

      - name: Health check
        run: |
          echo "Performing health check..."
          # Add health check commands
          sleep 30
          curl -f https://staging.video-ai-editor.com/health || exit 1

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands
          echo "Smoke tests passed!"

  # Job de deploy para produ√ß√£o
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://video-ai-editor.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          
          # Add your production deployment commands here
          # Example: Blue-green deployment
          
          echo "Deployment to production completed successfully!"

      - name: Health check
        run: |
          echo "Performing production health check..."
          # Add production health check commands
          sleep 60
          curl -f https://video-ai-editor.com/health || exit 1

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add production smoke test commands
          echo "Smoke tests passed!"

  # Job de rollback em caso de falha
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && needs.deploy-production.result == 'failure'
    environment:
      name: production
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back production deployment..."
          # Add rollback commands
          echo "Rollback completed!"

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Rollback',
              body: `Production deployment was rolled back due to failures.\n\nCommit: ${context.sha}\nWorkflow: ${context.workflow}`,
              labels: ['incident', 'rollback', 'high-priority']
            });

  # Job de notifica√ß√£o
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "‚úÖ Deployment completed successfully!"
          # Add notification commands (Slack, Discord, etc.)

      - name: Notify failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Add failure notification commands

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const status = needs.deploy-production.result == 'success' ? 'success' : 'failure';
            const environment = context.ref == 'refs/heads/main' ? 'production' : 'staging';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id,
              state: status,
              environment: environment,
              log_url: `https://github.com/${{ github.repository }}/actions/runs/${context.runId}`
            });
